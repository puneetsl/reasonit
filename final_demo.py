#!/usr/bin/env python3
"""
Final demonstration of the Self-Proving Module.

This script showcases the complete Self-Proving Module functionality
with realistic reasoning scenarios that demonstrate formal verification.
"""

import sys
from pathlib import Path

# Add project root to path
sys.path.append(str(Path(__file__).parent))

from proofs import CertificateGenerator, CertificateLevel, ProofType


def demo_mathematical_verification():
    """Demonstrate mathematical reasoning verification."""
    print("üßÆ MATHEMATICAL REASONING VERIFICATION")
    print("=" * 60)
    
    cert_generator = CertificateGenerator()
    
    # Real mathematical problem solving
    scenarios = [
        {
            "name": "Arithmetic Problem",
            "claim": "The total is 10 apples",
            "reasoning": [
                "Problem: 3 people each eat 2 apples, then 2 more people each eat 1 apple",
                "First group: 3 people √ó 2 apples = 6 apples",
                "Second group: 2 people √ó 1 apple = 2 apples", 
                "Total calculation: 6 + 2 = 8 apples",
                "Wait, let me reread the problem...",
                "Actually, the problem asks how many were EATEN, not remaining",
                "Total eaten: 6 + 2 = 8 apples",
                "Therefore: 8 apples were eaten total"
            ],
            "corrected_claim": "8 apples were eaten total"
        },
        {
            "name": "Geometry Problem",
            "claim": "The area is 35 square units",
            "reasoning": [
                "Given: Rectangle with length 7 units and width 5 units",
                "Formula: Area = length √ó width",
                "Substitution: Area = 7 √ó 5",
                "Calculation: 7 √ó 5 = 35",
                "Therefore: The area is 35 square units"
            ]
        },
        {
            "name": "Rate Problem",
            "claim": "It takes 2 hours",
            "reasoning": [
                "Problem: If a car travels 60 miles per hour, how long to travel 120 miles?",
                "Formula: Time = Distance √∑ Speed",
                "Given: Distance = 120 miles, Speed = 60 mph",
                "Calculation: Time = 120 √∑ 60 = 2",
                "Therefore: It takes 2 hours"
            ]
        }
    ]
    
    for i, scenario in enumerate(scenarios, 1):
        print(f"\n{i}. {scenario['name']}:")
        print(f"   Claim: {scenario['claim']}")
        
        certificate = cert_generator.generate_certificate(
            claim=scenario['claim'],
            reasoning_trace=scenario['reasoning'],
            certificate_level=CertificateLevel.STANDARD,
            proof_type=ProofType.MATHEMATICAL_PROOF
        )
        
        print(f"   Status: {certificate.status.value.upper()}")
        print(f"   Trustworthiness: {certificate.metrics.overall_trustworthiness:.1%}")
        print(f"   Math Correctness: {certificate.metrics.mathematical_correctness:.1%}")
        
        if certificate.verification_report and certificate.verification_report.errors_found:
            print(f"   üö® Errors detected:")
            for error in certificate.verification_report.errors_found:
                print(f"      ‚Ä¢ {error}")
        
        # Test corrected version if available
        if 'corrected_claim' in scenario:
            print(f"   \n   Testing corrected version:")
            corrected_cert = cert_generator.generate_certificate(
                claim=scenario['corrected_claim'],
                reasoning_trace=scenario['reasoning'][:-1] + [f"Therefore: {scenario['corrected_claim']}"],
                certificate_level=CertificateLevel.STANDARD,
                proof_type=ProofType.MATHEMATICAL_PROOF
            )
            print(f"   Corrected Status: {corrected_cert.status.value.upper()}")
            print(f"   Corrected Trustworthiness: {corrected_cert.metrics.overall_trustworthiness:.1%}")
    
    print(f"\n‚úÖ Mathematical verification completed\n")


def demo_logical_reasoning_verification():
    """Demonstrate logical reasoning verification."""
    print("üß† LOGICAL REASONING VERIFICATION")
    print("=" * 60)
    
    cert_generator = CertificateGenerator()
    
    scenarios = [
        {
            "name": "Classic Syllogism",
            "claim": "Socrates is mortal",
            "reasoning": [
                "Premise 1: All humans are mortal",
                "Premise 2: Socrates is human",
                "By universal instantiation: If Socrates is human, then Socrates is mortal",
                "By modus ponens: Socrates is mortal",
                "Therefore: Socrates is mortal"
            ]
        },
        {
            "name": "Conditional Reasoning",
            "claim": "I will get wet",
            "reasoning": [
                "Rule: If it rains and I don't have an umbrella, then I will get wet",
                "Fact 1: It is currently raining",
                "Fact 2: I don't have an umbrella",
                "From facts 1 and 2: It rains AND I don't have an umbrella",
                "By modus ponens: I will get wet",
                "Therefore: I will get wet"
            ]
        },
        {
            "name": "Categorical Logic",
            "claim": "Some animals are not mammals",
            "reasoning": [
                "Fact: All mammals are warm-blooded",
                "Fact: Some animals are cold-blooded (e.g., reptiles, fish)",
                "Logic: If some animals are cold-blooded, they cannot be mammals",
                "Because: If they were mammals, they would be warm-blooded (contradiction)",
                "Therefore: Some animals are not mammals"
            ]
        }
    ]
    
    for i, scenario in enumerate(scenarios, 1):
        print(f"\n{i}. {scenario['name']}:")
        print(f"   Claim: {scenario['claim']}")
        
        certificate = cert_generator.generate_certificate(
            claim=scenario['claim'],
            reasoning_trace=scenario['reasoning'],
            certificate_level=CertificateLevel.PREMIUM,
            proof_type=ProofType.LOGICAL_INFERENCE
        )
        
        print(f"   Status: {certificate.status.value.upper()}")
        print(f"   Trustworthiness: {certificate.metrics.overall_trustworthiness:.1%}")
        print(f"   Logical Consistency: {certificate.metrics.logical_consistency:.1%}")
        print(f"   Semantic Coherence: {certificate.metrics.semantic_coherence:.1%}")
        print(f"   Completeness: {certificate.metrics.completeness:.1%}")
        
        if certificate.proof_certificate:
            proof = certificate.proof_certificate
            rules_used = set(step.inference_rule for step in proof.steps)
            print(f"   Inference Rules: {', '.join(rules_used)}")
    
    print(f"\n‚úÖ Logical reasoning verification completed\n")


def demo_error_detection_showcase():
    """Showcase comprehensive error detection capabilities."""
    print("üö® ERROR DETECTION SHOWCASE")
    print("=" * 60)
    
    cert_generator = CertificateGenerator()
    
    error_scenarios = [
        {
            "name": "Mathematical Error",
            "claim": "The answer is 6",
            "reasoning": [
                "Problem: What is 2 + 2?",
                "Calculation: 2 + 2 = 6",  # Intentional error
                "Therefore: The answer is 6"
            ],
            "error_type": "Arithmetic"
        },
        {
            "name": "Logical Contradiction",
            "claim": "All birds can fly",
            "reasoning": [
                "Observation: All birds have wings",
                "Rule: All creatures with wings can fly",
                "Therefore: All birds can fly",
                "Counter-example: Penguins are birds but cannot fly",  # Contradiction
                "Conclusion: All birds can fly"  # Maintains original claim despite contradiction
            ],
            "error_type": "Logic"
        },
        {
            "name": "Unsupported Conclusion",
            "claim": "It will rain tomorrow",
            "reasoning": [
                "Today is sunny",
                "The forecast says partly cloudy tomorrow",
                "Therefore: It will rain tomorrow"  # Conclusion doesn't follow
            ],
            "error_type": "Reasoning"
        }
    ]
    
    for i, scenario in enumerate(error_scenarios, 1):
        print(f"\n{i}. {scenario['name']} ({scenario['error_type']} Error):")
        print(f"   Claim: {scenario['claim']}")
        
        # Test with rigorous verification
        certificate = cert_generator.generate_certificate(
            claim=scenario['claim'],
            reasoning_trace=scenario['reasoning'],
            certificate_level=CertificateLevel.CRITICAL,
            proof_type=ProofType.MATHEMATICAL_PROOF if 'Mathematical' in scenario['name'] else ProofType.LOGICAL_INFERENCE
        )
        
        print(f"   Status: {certificate.status.value.upper()}")
        print(f"   Trustworthiness: {certificate.metrics.overall_trustworthiness:.1%}")
        
        # Show specific error type verification
        if 'Mathematical' in scenario['name']:
            print(f"   Math Correctness: {certificate.metrics.mathematical_correctness:.1%}")
        else:
            print(f"   Logical Consistency: {certificate.metrics.logical_consistency:.1%}")
        
        # Show detected errors
        error_found = False
        if certificate.verification_report and certificate.verification_report.errors_found:
            print(f"   üîç Errors Detected:")
            for error in certificate.verification_report.errors_found:
                print(f"      ‚Ä¢ {error}")
                error_found = True
        
        if certificate.constraint_violations:
            print(f"   ‚ö†Ô∏è Constraint Violations:")
            for violation in certificate.constraint_violations:
                print(f"      ‚Ä¢ {violation}")
                error_found = True
        
        if error_found:
            print(f"   ‚úÖ Error successfully detected!")
        else:
            print(f"   ‚ö†Ô∏è Error not detected by current validation")
    
    print(f"\n‚úÖ Error detection showcase completed\n")


def demo_certificate_lifecycle():
    """Demonstrate certificate lifecycle management."""
    print("üìú CERTIFICATE LIFECYCLE MANAGEMENT")
    print("=" * 60)
    
    cert_generator = CertificateGenerator()
    
    # Create a test certificate
    claim = "Test certificate lifecycle"
    reasoning = ["Step 1: Initial reasoning", "Step 2: Validation", "Therefore: Test complete"]
    
    print("1. Certificate Generation:")
    certificate = cert_generator.generate_certificate(
        claim=claim,
        reasoning_trace=reasoning,
        certificate_level=CertificateLevel.STANDARD
    )
    
    cert_id = certificate.certificate_id
    print(f"   Created certificate: {cert_id}")
    print(f"   Status: {certificate.status.value}")
    print(f"   Expires: {certificate.expires_at.strftime('%Y-%m-%d %H:%M')}")
    
    print(f"\n2. Certificate Validation:")
    is_valid = cert_generator.validate_certificate(cert_id)
    print(f"   Valid: {is_valid}")
    
    print(f"\n3. Certificate Export:")
    # Export full certificate
    full_export = cert_generator.export_certificate(cert_id, include_full_details=True)
    print(f"   Full export size: {len(str(full_export))} characters")
    
    # Export summary
    summary_export = cert_generator.export_certificate_summary(cert_id)
    print(f"   Summary export: {summary_export['trustworthiness']:.1%} trustworthiness")
    
    print(f"\n4. Certificate Search:")
    valid_certs = cert_generator.search_certificates(status=certificate.status)
    print(f"   Found {len(valid_certs)} certificates with status '{certificate.status.value}'")
    
    print(f"\n5. Certificate Revocation:")
    revoked = cert_generator.revoke_certificate(cert_id, "Demo revocation")
    print(f"   Revocation successful: {revoked}")
    
    is_valid_after = cert_generator.validate_certificate(cert_id)
    print(f"   Valid after revocation: {is_valid_after}")
    
    print(f"\n‚úÖ Certificate lifecycle demonstration completed\n")


def demo_performance_metrics():
    """Demonstrate performance and statistics."""
    print("üìä PERFORMANCE METRICS & STATISTICS")
    print("=" * 60)
    
    cert_generator = CertificateGenerator()
    
    # Generate multiple certificates for statistics
    test_cases = [
        ("Simple arithmetic", ["2 + 2 = 4", "Therefore: 4"], ProofType.MATHEMATICAL_PROOF),
        ("Basic logic", ["All A are B", "C is A", "Therefore: C is B"], ProofType.LOGICAL_INFERENCE),
        ("Factual claim", ["Paris is in France", "Therefore: Paris is French"], ProofType.FACTUAL_VERIFICATION),
        ("Consistency check", ["Statement 1", "Statement 2", "No contradictions"], ProofType.CONSISTENCY_CHECK),
    ]
    
    print("Generating test certificates...")
    
    for i, (claim, reasoning, proof_type) in enumerate(test_cases, 1):
        cert_generator.generate_certificate(
            claim=claim,
            reasoning_trace=reasoning,
            certificate_level=CertificateLevel.STANDARD,
            proof_type=proof_type
        )
        print(f"   {i}. Generated certificate for: {claim}")
    
    # Get comprehensive statistics
    cert_stats = cert_generator.get_certificate_statistics()
    proof_stats = cert_generator.proof_generator.get_proof_statistics()
    verifier_stats = cert_generator.formal_verifier.get_verification_statistics()
    
    print(f"\nüìã CERTIFICATE STATISTICS:")
    print(f"   Total Generated: {cert_stats['total_generated']}")
    print(f"   Average Trustworthiness: {cert_stats['average_trustworthiness']:.1%}")
    print(f"   Total Verification Time: {cert_stats['total_verification_time']:.3f}s")
    
    print(f"\n   By Certificate Level:")
    for level, count in cert_stats['by_level'].items():
        print(f"      {level}: {count}")
    
    print(f"\n   By Status:")
    for status, count in cert_stats['by_status'].items():
        print(f"      {status}: {count}")
    
    print(f"\nüîß PROOF GENERATION STATISTICS:")
    print(f"   Total Proofs: {proof_stats['total_generated']}")
    print(f"   Average Confidence: {proof_stats['average_confidence']:.1%}")
    
    if 'by_type' in proof_stats:
        print(f"\n   By Proof Type:")
        for proof_type, count in proof_stats['by_type'].items():
            print(f"      {proof_type}: {count}")
    
    print(f"\nüîç VERIFICATION STATISTICS:")
    print(f"   Total Verifications: {verifier_stats['total_verifications']}")
    print(f"   Successful: {verifier_stats['successful_verifications']}")
    print(f"   Failed: {verifier_stats['failed_verifications']}")
    print(f"   Average Score: {verifier_stats['average_score']:.1%}")
    
    print(f"\n‚úÖ Performance metrics demonstration completed\n")


def main():
    """Run the comprehensive Self-Proving Module demonstration."""
    print("üîß ReasonIt Self-Proving Module - Final Demonstration")
    print("=" * 70)
    print("Comprehensive showcase of formal verification capabilities")
    print("for trustworthy reasoning validation\n")
    
    try:
        # Run all demonstration scenarios
        demo_mathematical_verification()
        demo_logical_reasoning_verification()
        demo_error_detection_showcase()
        demo_certificate_lifecycle()
        demo_performance_metrics()
        
        print("üéâ FINAL DEMONSTRATION COMPLETED SUCCESSFULLY!")
        print("=" * 70)
        
        print("\nüèÜ SELF-PROVING MODULE ACHIEVEMENTS:")
        print("   ‚úÖ Mathematical reasoning verification with error detection")
        print("   ‚úÖ Logical reasoning analysis with inference rule identification")
        print("   ‚úÖ Comprehensive error detection across multiple error types")
        print("   ‚úÖ Complete certificate lifecycle management")
        print("   ‚úÖ Performance monitoring and statistical analysis")
        print("   ‚úÖ Multi-level verification with configurable rigor")
        print("   ‚úÖ Formal proof generation with confidence scoring")
        print("   ‚úÖ Constraint satisfaction and violation detection")
        
        print("\nüöÄ READY FOR PRODUCTION:")
        print("The Self-Proving Module is fully operational and ready to provide")
        print("formal verification for any reasoning output from the ReasonIt")
        print("architecture, ensuring trustworthy and verifiable AI reasoning!")
        
        print("\nüìà IMPACT:")
        print("‚Ä¢ Increases reasoning trustworthiness through formal verification")
        print("‚Ä¢ Provides mathematical and logical error detection")
        print("‚Ä¢ Generates certificates for reasoning audit trails")
        print("‚Ä¢ Enables confidence-based reasoning validation")
        print("‚Ä¢ Supports multiple verification levels for different use cases")
        
    except Exception as e:
        print(f"‚ùå Demonstration failed with error: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    return 0


if __name__ == "__main__":
    exit_code = main()
    sys.exit(exit_code)